@model TourismWeb.Models.ViewModels.DashboardViewModel

@section Styles {
    <link rel="stylesheet" href="~/cssadmin/styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
}

@{
    ViewData["Title"] = "Hệ Thống Quản Trị";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script> 
    <script src="~/js/jsadmin/dashboard.js" asp-append-version="true"></script>
    <script>
        // Truyền dữ liệu từ ViewModel sang JavaScript cho biểu đồ
        const postChartLabels = @Html.Raw(Json.Serialize(Model.PostChartLabels));
        const postChartData = @Html.Raw(Json.Serialize(Model.PostChartData));
        const distributionChartLabels = @Html.Raw(Json.Serialize(Model.DistributionChartLabels));
        const distributionChartData = @Html.Raw(Json.Serialize(Model.DistributionChartData));

        // DEBUGGING - Kiểm tra dữ liệu truyền sang
        console.log("Post Chart Labels:", postChartLabels);
        console.log("Post Chart Data:", postChartData);
        console.log("Distribution Chart Labels:", distributionChartLabels);
        console.log("Distribution Chart Data:", distributionChartData);

        document.addEventListener('DOMContentLoaded', function () {
            // Xử lý thay đổi time-range
            const timeRangeSelect = document.getElementById('time-range');
            const dateFiltersSection = document.getElementById('dateFiltersSection');
            
            // Kiểm tra nếu đang ở chế độ tùy chỉnh (custom) hoặc có thông tin ngày
            function checkCustomDateMode() {
                const urlParams = new URLSearchParams(window.location.search);
                const hasDateParams = urlParams.has('fromDate') || urlParams.has('toDate');
                
                if (timeRangeSelect.value === 'custom' || hasDateParams) {
                    dateFiltersSection.style.display = 'block';
                    // Nếu có date params nhưng không phải custom, chọn custom
                    if (hasDateParams && timeRangeSelect.value !== 'custom') {
                        timeRangeSelect.value = 'custom';
                    }
                } else {
                    dateFiltersSection.style.display = 'none';
                }
            }
            
            // Kiểm tra ban đầu
            checkCustomDateMode();
            
            // Xử lý khi người dùng thay đổi lựa chọn time range
            if (timeRangeSelect) {
                timeRangeSelect.addEventListener('change', function () {
                    const selectedValue = this.value;
                    
                    // Nếu chọn tùy chỉnh, hiển thị form date range
                    if (selectedValue === 'custom') {
                        dateFiltersSection.style.display = 'block';
                        // Focus vào input đầu tiên để cải thiện UX
                        setTimeout(() => document.getElementById('fromDate').focus(), 100);
                    } else {
                        dateFiltersSection.style.display = 'none';
                        // Khi chọn time range khác, reset date inputs
                        document.getElementById('fromDate').value = '';
                        document.getElementById('toDate').value = '';
                        
                        // Chuyển trang với timeRange được chọn
                        applyTimeRange(selectedValue);
                    }
                });
            }
            
            // Xử lý form date range
            const dateRangeForm = document.getElementById('dateRangeForm');
            if (dateRangeForm) {
                dateRangeForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const fromDate = document.getElementById('fromDate').value;
                    const toDate = document.getElementById('toDate').value;
                    
                    if (fromDate && toDate) {
                        // Chuyển hướng với tham số date range
                        let currentUrlPath = window.location.pathname;
                        window.location.href = `${currentUrlPath}?fromDate=${fromDate}&toDate=${toDate}&timeRange=custom`;
                    } else {
                        alert('Vui lòng chọn cả ngày bắt đầu và ngày kết thúc');
                    }
                });
            }
            
            // Xử lý nút đặt lại
            const resetButton = document.getElementById('resetButton');
            if (resetButton) {
                resetButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    // Reset về mặc định 30 ngày
                    let currentUrlPath = window.location.pathname;
                    window.location.href = currentUrlPath;
                });
            }

            // Khởi tạo biểu đồ số bài viết
            if (document.getElementById('postsChart')) {
                initPostsChart();
            }

            // Khởi tạo biểu đồ tỷ lệ phân bố
            if (document.getElementById('distributionChart')) {
                initDistributionChart();
            }
        });
        
        // Hàm áp dụng time range khi thay đổi select box
        function applyTimeRange(value) {
            if (value !== 'custom') {
                let currentUrlPath = window.location.pathname;
                window.location.href = `${currentUrlPath}?timeRange=${value}`;
            }
        }

        // HÀM KHỞI TẠO BIỂU ĐỒ SỐ BÀI VIẾT
        function initPostsChart() {
            const ctxPosts = document.getElementById('postsChart').getContext('2d');
            new Chart(ctxPosts, {
                type: 'line', // Hoặc 'bar'
                data: {
                    labels: postChartLabels,
                    datasets: [{
                        label: 'Số bài viết',
                        data: postChartData,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                // Đảm bảo chỉ hiển thị số nguyên trên trục y
                                stepSize: 1,
                                callback: function(value) { if (Number.isInteger(value)) { return value; } },
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                        },
                        title: {
                            display: false,
                        }
                    }
                }
            });
        }

        // HÀM KHỞI TẠO BIỂU ĐỒ TỶ LỆ PHÂN BỐ (DOUGHNUT HOẶC PIE)
        function initDistributionChart() {
            const ctxDistribution = document.getElementById('distributionChart').getContext('2d');
            new Chart(ctxDistribution, {
                type: 'doughnut',
                data: {
                    labels: distributionChartLabels,
                    datasets: [{
                        label: 'Tỷ lệ phân bố',
                        data: distributionChartData,
                        backgroundColor: [
                            '#FF6384',
                            '#36A2EB',
                            '#FFCE56'
                        ],
                        borderColor: [
                            '#FFFFFF',
                            '#FFFFFF',
                            '#FFFFFF'
                        ],
                        borderWidth: 2,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '50%',
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 20
                            }
                        },
                        title: {
                            display: false,
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        const value = context.raw;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = total > 0 ? ((value / total) * 100).toFixed(1) + '%' : '0%';
                                        label += `${value} (${percentage})`;
                                    }
                                    return label;
                                }
                            }
                        },
                        datalabels: {
                            display: true,
                            formatter: (value, ctx) => {
                                let sum = 0;
                                let dataArr = ctx.chart.data.datasets[0].data;
                                dataArr.map(data => {
                                    sum += data;
                                });
                                if (sum === 0) return '';
                                let percentage = (value * 100 / sum).toFixed(1) + "%";
                                return value > 0 ? percentage : '';
                            },
                            color: (context) => {
                                const bgColor = context.dataset.backgroundColor[context.dataIndex];
                                const colorThreshold = 128;
                                const rgb = bgColor.match(/\d+/g);
                                if (rgb) {
                                     const brightness = (parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000;
                                     return brightness > colorThreshold ? '#000000' : '#FFFFFF';
                                }
                                return '#FFFFFF';
                            },
                            font: {
                                weight: 'bold',
                                size: 12
                            },
                            anchor: 'center',
                            align: 'center',
                        }
                    }
                }
            });
        }
    </script>
}

<div class="app-container">
    <!-- Main Content -->
    <div class="main-content">
        <main class="content-wrapper">
            <button class="toggle-sidebar">
                <i class="fas fa-bars"></i>
            </button>

            <div class="page-header">
                <h1 class="page-title">Tổng Quan</h1>
                <div class="page-actions">
                    <div class="filter-group">
                        <div class="time-filter-row">
                            <label for="time-range">Thời gian:</label>
                            @{
                                var options = new[] { 7, 30, -1 }; // -1 đại diện cho "Tất cả"
                                var selectedTimeRange = ViewBag.SelectedTimeRange ?? "30";
                                var isCustomRange = selectedTimeRange == "custom";
                            }
                            <select id="time-range" class="select-control">
                                @foreach (var days in options)
                                {
                                    if (days == -1) 
                                    {
                                        if (selectedTimeRange == "-1")
                                        {
                                            <option value="-1" selected>Tất cả</option>
                                        }
                                        else
                                        {
                                            <option value="-1">Tất cả</option>
                                        }
                                    }
                                    else 
                                    {
                                        if (selectedTimeRange == days.ToString())
                                        {
                                            <option value="@days" selected>@days ngày</option>
                                        }
                                        else
                                        {
                                            <option value="@days">@days ngày</option>
                                        }
                                    }
                                }
                                @if (isCustomRange)
                                {
                                    <option value="custom" selected>Tùy chỉnh</option>
                                }
                                else
                                {
                                    <option value="custom">Tùy chỉnh</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Phần lọc theo ngày tùy chỉnh với nút lọc và đặt lại cùng hàng, giống hình mẫu -->
            <div id="dateFiltersSection" class="date-filters-section" style="display: @(isCustomRange ? "block" : "none");">
                <form id="dateRangeForm" class="date-filters-form">
                    <div class="filter-inline-container">
                        <div class="date-label">Từ ngày:</div>
                        <input type="date" id="fromDate" name="fromDate" class="date-input" value="@ViewBag.FromDate">
                        
                        <div class="date-label">Đến ngày:</div>
                        <input type="date" id="toDate" name="toDate" class="date-input" value="@ViewBag.ToDate">
                        
                        <button type="submit" class="filter-button">
                            <i class="fas fa-filter"></i> Lọc
                        </button>
                        <button type="button" id="resetButton" class="reset-button">
                            <i class="fas fa-undo"></i> Đặt lại
                        </button>
                    </div>
                </form>
            </div>

            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stats-card">
                    <div class="stats-card-content">
                        <div>
                            <p class="stats-card-label">Tổng số bài viết</p>
                            <p class="stats-card-value">@Model.TotalPosts</p>
                        </div>
                        <div class="stats-card-icon blue">
                            <i class="fas fa-file-alt"></i>
                        </div>
                    </div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-content">
                        <div>
                            <p class="stats-card-label">Bài viết về Địa điểm</p>
                            <p class="stats-card-value">@Model.PostsInLocationCategory</p>
                        </div>
                        <div class="stats-card-icon blue-light">
                            <i class="fas fa-map-marker-alt"></i>
                        </div>
                    </div>
                </div>

                <div class="stats-card">
                    <div class="stats-card-content">
                        <div>
                            <p class="stats-card-label">Cẩm nang du lịch</p>
                            <p class="stats-card-value">@Model.PostsInGuidebookCategory</p>
                        </div>
                        <div class="stats-card-icon green">
                            <i class="fas fa-book"></i>
                        </div>
                    </div>
                </div>

                <div class="stats-card">
                    <div class="stats-card-content">
                        <div>
                            <p class="stats-card-label">Trải nghiệm</p>
                            <p class="stats-card-value">@Model.PostsInExperienceCategory</p>
                        </div>
                        <div class="stats-card-icon amber">
                            <i class="fas fa-star"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="charts-grid">
                <div class="chart-card large">
                    <h2 class="chart-title">
                        @if (ViewBag.FromDate != null && ViewBag.ToDate != null)
                        {
                            <span>Số bài viết từ @DateTime.Parse(ViewBag.FromDate).ToString("dd/MM/yyyy") đến @DateTime.Parse(ViewBag.ToDate).ToString("dd/MM/yyyy")</span>
                        }
                        else
                        {
                            <span>Số bài viết trong @(ViewBag.SelectedTimeRange == "-1" ? "tất cả thời gian" : ViewBag.SelectedTimeRange + " ngày qua")</span>
                        }
                    </h2>
                    <div class="chart-container">
                        <canvas id="postsChart"></canvas>
                    </div>
                </div>

                <div class="chart-card">
                    <h2 class="chart-title">Tỷ lệ phân bố</h2>
                    <div class="chart-container">
                        <canvas id="distributionChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Recent Activities -->
            @if (Model.RecentActivities.Any())
            {
                <div class="table-card">
                    <div class="table-header">
                        <h2 class="table-title">Hoạt động gần đây</h2>
                        <a asp-controller="Posts" asp-action="Index" asp-area="Admin" class="view-all">Xem tất cả</a>
                    </div>
                    <div class="table-responsive">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Tiêu đề</th>
                                    <th>Loại</th>
                                    <th>Tác giả</th>
                                    <th>Ngày đăng</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var post in Model.RecentActivities)
                                {
                                    <tr>
                                        <td>
                                            <div class="table-title-cell">@post.Title</div>
                                        </td>
                                        <td>
                                            @if (post.TypeOfPost == "Cẩm nang")
                                            {
                                                <span class="badge green"><i class="fas fa-book"></i> @post.TypeOfPost</span>
                                            }
                                            else if (post.TypeOfPost == "Trải nghiệm")
                                            {
                                                <span class="badge amber"><i class="fas fa-star"></i> @post.TypeOfPost</span>
                                            }
                                            else if (post.TypeOfPost == "Địa điểm")
                                            {
                                                <span class="badge blue-light"><i class="fas fa-map-marker-alt"></i> @post.TypeOfPost</span>
                                            }
                                            else
                                            {
                                                <span class="badge gray">@post.TypeOfPost</span>
                                            }
                                        </td>
                                        <td>@(post.User?.FullName ?? "N/A")</td>
                                        <td>
                                            <div class="date-cell">
                                                <i class="fas fa-clock"></i>
                                                @post.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                            </div>
                                        </td>
                                        <td>
                                            <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.PostId" asp-area="Admin" class="action-link">Xem</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info mt-4">Chưa có hoạt động nào gần đây.</div>
            }
        </main>
    </div>
</div>